/**
* E2D3 ver. 0.2 is developed by E2D3 Project Members.
* Especially, all files in this repository are coded by engineers described below.
* However, all rights of all codes are reserved by Yasunobu Igarashi to realize a rapid management.
* And we released E2D3 ver. 0.2 under GNU AFFERO GENERAL PUBLIC LICENSE, Version 3.
* Lisence and Readme file see https://github.com/hipsrinoky/E2D3
* -- 
* Ver 0.2.2
* Lastest update 2014/11/07  Modified by Yu Yamamoto
* Minified by http://jscompress.com/
*/
function showObj(e, t) { var n; if (!n) { n = $("body") } if (!t) t = 0; var r = 0; $(e).each(function (e) { console.log(this); $(n).append($("<div></div>").html("[" + r + "] <strong>" + e + "</strong> = " + this).css("margin-left", function () { return t * 10 + "px" })); r++ }) } function showError(e, t) { console.log(e); if (!t) { t = "info" } var n = $("<div>").addClass("e2d3-alert p6 alert alert-" + t).html(e).hide(); $("<body>").prepend(n); $(n).fadeIn(400, function () { $(n).delay(2e3).fadeOut(600, function () { $(n).remove() }) }) } function lookdeep(e) { var t = [], n = 0, r, i; for (i in e) { if (e.hasOwnProperty(i)) { r = e[i]; if (typeof r == "object" && r != null) { t[n++] = i + ":{ " + lookdeep(r).join(", ") + "}" } else t[n++] = [i + ":" + String(r)] } } return t } var e2d3 = function () { "use strict"; var e = {}; e.initialize = function (e) { Office.initialize = function (t) { if (e) callback(t) } }; e.setBindData = function (e, t) { function n(e) { console.log("setBindData: bindId = " + e.id); if (e.is_prompt) { Office.context.document.bindings.addFromPromptAsync(Office.BindingType.Matrix, e, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { return t(e.value) } else { if (e.error) { showError("setBindData Error: " + e.error.name + ":" + e.error.message, "danger") } return t(false) } }) } else { Office.context.document.bindings.addFromSelectionAsync(Office.BindingType.Matrix, e, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { return t(e.value) } else { if (e.error) { showError("setBindData Error: " + e.error.name + ":" + e.error.message, "danger") } return t(false) } }) } } if (!e.id) { Office.context.document.bindings.getAllAsync(function (t) { e.id = !t.value ? 0 : t.value++; n(e) }) } else { n(e) } }; e.getBindDataById = function (e, t) { }; e.getAllBindData = function (e) { Office.context.document.bindings.getAllAsync(function (t) { if (t.status === Office.AsyncResultStatus.Succeeded) { return e(t.value) } else { if (t.error) { showError("Error: " + t.error.name + ":" + t.error.message, "danger") } } }) }; e.addChangeEvent = function (e, t) { e.addHandlerAsync(Office.EventType.BindingDataChanged, function (e) { var n; if (e.binding.id) { n = true } else { n = false } if (t) t(n) }) }; e.bind2Json = function (e, t, n) { console.log("bind2Json: bindId = " + e); console.log("bind2Json: dimension = " + t.dimension); var r; r = t.is_formatted ? Office.ValueFormat.Formatted : Office.ValueFormat.Unformatted; Office.context.document.bindings.getByIdAsync(e, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { e.value.getDataAsync({ valueFormat: r }, function (e) { if (t.dimension === "1d") { var r = new Array; var i = new Array; var s = new Array; for (var o = 0; o <= e.value.length; o++) { if (e.value[o]) { r[o] = e.value[o][0] } } if (!String(r[0]).match(/\d+/)) { for (var o = 0; o <= r.length; o++) { console.log("bind2json: 1d dimension loop i(not num) = " + o); if (o != 0) { console.log("bind2json: i is not num"); s[r[0]][o - 1] = r[o] } console.log("data => "); console.log(s); return n(s) } } else { return n(r) } } else if (t.dimension == "2d") { var r = e.value; console.log("bind2json: 2D dimension before value.length = " + r.length + ", value = " + r); var u = r[0]; var s = []; r.slice(1).forEach(function (e) { var t = {}; u.forEach(function (n, r) { t[n] = e[r] }); s.push(t) }); console.log("bind2json: 2D dimension data.length = " + s.length + ", data = " + s); return n(s) } else if (t.dimension == "3d") { var r = e.value; var u = r[0]; var s = {}; r.slice(1).forEach(function (e) { var t = {}; u.forEach(function (n, r) { t[n] = e[r] }); s[e[0]] = t }); return n(s) } else { return n(e.value) } }) } else { if (e.error) { showError("bind2Json Error: " + e.error.name + ":" + e.error.message, "danger") } n(false) } }) }; e.json2Excel = function (e, t) { Office.context.document.setSelectedDataAsync(e, { coercionType: Office.CoercionType.Matrix }, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { return t(true) } else { if (e.error) { showError("Error: " + e.error.name + ":" + e.error.message, "danger") } t(false) } }) }; e.trimmedJson2Excel = function (e, t, n) { var r = new Array; if (!Array.isArray(e)) { if (t.dimension === "1d") { } else if (t.dimension === "2d") { var i = 1; e.forEach(function (e, t) { var n = []; if (t == 0) { var s = [], o = 0; for (var u in e) if (e.hasOwnProperty(u)) { s[o] = u; n[o] = e[u]; o++ } r[0] = s; r[i] = n } else { var a = 0; for (var u in e) if (e.hasOwnProperty(u)) { n[a] = e[u]; a++ } r[i] = n } i++ }) } else if (t.dimension === "3d") { } } console.log("trimedJson2Excel: data = " + r); var s; if (r.length > 0) { Office.context.document.setSelectedDataAsync(r, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { s = true } else { if (e.error) { showError("Error: " + e.error.name + ":" + e.error.message, "danger") } s = false } }) } else { showError("Posted data not available.", "danger"); s = false } n(s) }; e.releaseBindDataById = function (e, t) { function n(e, t) { var n = []; for (var i = 0; i <= t.rowCount - 1; i++) { var s = []; for (var o = 0; o <= t.columnCount - 1; o++) { s[o] = "" } n[i] = s } console.log(n); Office.context.document.setSelectedDataAsync(n, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { } else { if (e.error) { } } }); r(e) } function r(e) { Office.context.document.bindings.releaseByIdAsync(e.id, function (e) { if (e.status === Office.AsyncResultStatus.Succeeded) { t(true) } else { if (e.error) { } t(false) } }) } if (!e.id) { return false } if (e.isDataDelete) { Office.context.document.bindings.getByIdAsync(e.id, function (t) { if (t.status === Office.AsyncResultStatus.Succeeded) { var i = t.value; n(e, i) } else { if (t.error) { } r(e) } }) } else { r(e) } }; return e }()